// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.1
// - protoc             v3.21.5
// source: weixin/v1/weixin.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationWeixinCode2Session = "/api.weixin.v1.Weixin/Code2Session"

type WeixinHTTPServer interface {
	Code2Session(context.Context, *Code2SessionRequest) (*Code2SessionReply, error)
}

func RegisterWeixinHTTPServer(s *http.Server, srv WeixinHTTPServer) {
	r := s.Route("/")
	r.GET("/sns/jscode2session", _Weixin_Code2Session0_HTTP_Handler(srv))
}

func _Weixin_Code2Session0_HTTP_Handler(srv WeixinHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Code2SessionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWeixinCode2Session)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Code2Session(ctx, req.(*Code2SessionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Code2SessionReply)
		return ctx.Result(200, reply)
	}
}

type WeixinHTTPClient interface {
	Code2Session(ctx context.Context, req *Code2SessionRequest, opts ...http.CallOption) (rsp *Code2SessionReply, err error)
}

type WeixinHTTPClientImpl struct {
	cc *http.Client
}

func NewWeixinHTTPClient(client *http.Client) WeixinHTTPClient {
	return &WeixinHTTPClientImpl{client}
}

func (c *WeixinHTTPClientImpl) Code2Session(ctx context.Context, in *Code2SessionRequest, opts ...http.CallOption) (*Code2SessionReply, error) {
	var out Code2SessionReply
	pattern := "/sns/jscode2session"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWeixinCode2Session))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
