// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.1
// - protoc             v3.21.5
// source: mall/v1/category.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCategoryServiceListCategory = "/api.mall.v1.CategoryService/ListCategory"

type CategoryServiceHTTPServer interface {
	ListCategory(context.Context, *ListCategoryRequest) (*ListCategoryReply, error)
}

func RegisterCategoryServiceHTTPServer(s *http.Server, srv CategoryServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/categories", _CategoryService_ListCategory0_HTTP_Handler(srv))
}

func _CategoryService_ListCategory0_HTTP_Handler(srv CategoryServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCategoryServiceListCategory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCategory(ctx, req.(*ListCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCategoryReply)
		return ctx.Result(200, reply)
	}
}

type CategoryServiceHTTPClient interface {
	ListCategory(ctx context.Context, req *ListCategoryRequest, opts ...http.CallOption) (rsp *ListCategoryReply, err error)
}

type CategoryServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewCategoryServiceHTTPClient(client *http.Client) CategoryServiceHTTPClient {
	return &CategoryServiceHTTPClientImpl{client}
}

func (c *CategoryServiceHTTPClientImpl) ListCategory(ctx context.Context, in *ListCategoryRequest, opts ...http.CallOption) (*ListCategoryReply, error) {
	var out ListCategoryReply
	pattern := "/v1/categories"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCategoryServiceListCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
