// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsCategoryUnspecified(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_UNSPECIFIED.String() && e.Code == 400
}

func ErrorCategoryUnspecified(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_CATEGORY_UNSPECIFIED.String(), fmt.Sprintf(format, args...))
}

func IsCategoryNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CATEGORY_NOT_FOUND.String() && e.Code == 404
}

func ErrorCategoryNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_CATEGORY_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsGoodsUnspecified(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GOODS_UNSPECIFIED.String() && e.Code == 400
}

func ErrorGoodsUnspecified(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_GOODS_UNSPECIFIED.String(), fmt.Sprintf(format, args...))
}

func IsGoodsNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GOODS_NOT_FOUND.String() && e.Code == 404
}

func ErrorGoodsNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_GOODS_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsGoodsInfoNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GOODS_INFO_NOT_FOUND.String() && e.Code == 404
}

func ErrorGoodsInfoNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_GOODS_INFO_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsSkuNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SKU_NOT_FOUND.String() && e.Code == 404
}

func ErrorSkuNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_SKU_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsAttrsNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ATTRS_NOT_FOUND.String() && e.Code == 404
}

func ErrorAttrsNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_ATTRS_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsAttrValuesNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ATTR_VALUES_NOT_FOUND.String() && e.Code == 404
}

func ErrorAttrValuesNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_ATTR_VALUES_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsListGoodsError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LIST_GOODS_ERROR.String() && e.Code == 500
}

func ErrorListGoodsError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_LIST_GOODS_ERROR.String(), fmt.Sprintf(format, args...))
}
