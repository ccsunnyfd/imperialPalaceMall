// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"imperialPalaceMall/app/shop/internal/biz"
	"imperialPalaceMall/app/shop/internal/conf"
	"imperialPalaceMall/app/shop/internal/data"
	"imperialPalaceMall/app/shop/internal/server"
	"imperialPalaceMall/app/shop/internal/service"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	userClient := data.NewUserClient(confData, logger)
	categoryServiceClient := data.NewCategoryClient(confData, logger)
	goodsServiceClient := data.NewGoodsClient(confData, logger)
	cartServiceClient := data.NewCartClient(confData, logger)
	dataData, err := data.NewData(logger, userClient, categoryServiceClient, goodsServiceClient, cartServiceClient)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logger)
	userUsecase := biz.NewUserUsecase(userRepo, logger)
	categoryRepo := data.NewCategoryRepo(dataData, logger)
	categoryUsecase := biz.NewCategoryUsecase(categoryRepo, logger)
	goodsRepo := data.NewGoodsRepo(dataData, logger)
	goodsUsecase := biz.NewGoodsUsecase(goodsRepo, logger)
	cartRepo := data.NewCartRepo(dataData, logger)
	cartUsecase := biz.NewCartUsecase(cartRepo, logger)
	shopInterface := service.NewShopInterface(userUsecase, categoryUsecase, goodsUsecase, cartUsecase, logger)
	httpServer := server.NewHTTPServer(confServer, shopInterface, logger)
	app := newApp(logger, httpServer)
	return app, func() {
	}, nil
}
