// Code generated by ent, DO NOT EDIT.

package cart

import (
	"imperialPalaceMall/app/cart/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// GoodsID applies equality check predicate on the "goods_id" field. It's identical to GoodsIDEQ.
func GoodsID(v int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodsID), v))
	})
}

// GoodsSkuID applies equality check predicate on the "goods_sku_id" field. It's identical to GoodsSkuIDEQ.
func GoodsSkuID(v int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodsSkuID), v))
	})
}

// GoodsSkuDesc applies equality check predicate on the "goods_sku_desc" field. It's identical to GoodsSkuDescEQ.
func GoodsSkuDesc(v string) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodsSkuDesc), v))
	})
}

// Num applies equality check predicate on the "num" field. It's identical to NumEQ.
func Num(v int32) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNum), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.Cart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.Cart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// GoodsIDEQ applies the EQ predicate on the "goods_id" field.
func GoodsIDEQ(v int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodsID), v))
	})
}

// GoodsIDNEQ applies the NEQ predicate on the "goods_id" field.
func GoodsIDNEQ(v int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoodsID), v))
	})
}

// GoodsIDIn applies the In predicate on the "goods_id" field.
func GoodsIDIn(vs ...int64) predicate.Cart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGoodsID), v...))
	})
}

// GoodsIDNotIn applies the NotIn predicate on the "goods_id" field.
func GoodsIDNotIn(vs ...int64) predicate.Cart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGoodsID), v...))
	})
}

// GoodsIDGT applies the GT predicate on the "goods_id" field.
func GoodsIDGT(v int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoodsID), v))
	})
}

// GoodsIDGTE applies the GTE predicate on the "goods_id" field.
func GoodsIDGTE(v int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoodsID), v))
	})
}

// GoodsIDLT applies the LT predicate on the "goods_id" field.
func GoodsIDLT(v int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoodsID), v))
	})
}

// GoodsIDLTE applies the LTE predicate on the "goods_id" field.
func GoodsIDLTE(v int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoodsID), v))
	})
}

// GoodsSkuIDEQ applies the EQ predicate on the "goods_sku_id" field.
func GoodsSkuIDEQ(v int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodsSkuID), v))
	})
}

// GoodsSkuIDNEQ applies the NEQ predicate on the "goods_sku_id" field.
func GoodsSkuIDNEQ(v int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoodsSkuID), v))
	})
}

// GoodsSkuIDIn applies the In predicate on the "goods_sku_id" field.
func GoodsSkuIDIn(vs ...int64) predicate.Cart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGoodsSkuID), v...))
	})
}

// GoodsSkuIDNotIn applies the NotIn predicate on the "goods_sku_id" field.
func GoodsSkuIDNotIn(vs ...int64) predicate.Cart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGoodsSkuID), v...))
	})
}

// GoodsSkuIDGT applies the GT predicate on the "goods_sku_id" field.
func GoodsSkuIDGT(v int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoodsSkuID), v))
	})
}

// GoodsSkuIDGTE applies the GTE predicate on the "goods_sku_id" field.
func GoodsSkuIDGTE(v int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoodsSkuID), v))
	})
}

// GoodsSkuIDLT applies the LT predicate on the "goods_sku_id" field.
func GoodsSkuIDLT(v int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoodsSkuID), v))
	})
}

// GoodsSkuIDLTE applies the LTE predicate on the "goods_sku_id" field.
func GoodsSkuIDLTE(v int64) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoodsSkuID), v))
	})
}

// GoodsSkuDescEQ applies the EQ predicate on the "goods_sku_desc" field.
func GoodsSkuDescEQ(v string) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodsSkuDesc), v))
	})
}

// GoodsSkuDescNEQ applies the NEQ predicate on the "goods_sku_desc" field.
func GoodsSkuDescNEQ(v string) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoodsSkuDesc), v))
	})
}

// GoodsSkuDescIn applies the In predicate on the "goods_sku_desc" field.
func GoodsSkuDescIn(vs ...string) predicate.Cart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGoodsSkuDesc), v...))
	})
}

// GoodsSkuDescNotIn applies the NotIn predicate on the "goods_sku_desc" field.
func GoodsSkuDescNotIn(vs ...string) predicate.Cart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGoodsSkuDesc), v...))
	})
}

// GoodsSkuDescGT applies the GT predicate on the "goods_sku_desc" field.
func GoodsSkuDescGT(v string) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoodsSkuDesc), v))
	})
}

// GoodsSkuDescGTE applies the GTE predicate on the "goods_sku_desc" field.
func GoodsSkuDescGTE(v string) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoodsSkuDesc), v))
	})
}

// GoodsSkuDescLT applies the LT predicate on the "goods_sku_desc" field.
func GoodsSkuDescLT(v string) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoodsSkuDesc), v))
	})
}

// GoodsSkuDescLTE applies the LTE predicate on the "goods_sku_desc" field.
func GoodsSkuDescLTE(v string) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoodsSkuDesc), v))
	})
}

// GoodsSkuDescContains applies the Contains predicate on the "goods_sku_desc" field.
func GoodsSkuDescContains(v string) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGoodsSkuDesc), v))
	})
}

// GoodsSkuDescHasPrefix applies the HasPrefix predicate on the "goods_sku_desc" field.
func GoodsSkuDescHasPrefix(v string) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGoodsSkuDesc), v))
	})
}

// GoodsSkuDescHasSuffix applies the HasSuffix predicate on the "goods_sku_desc" field.
func GoodsSkuDescHasSuffix(v string) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGoodsSkuDesc), v))
	})
}

// GoodsSkuDescEqualFold applies the EqualFold predicate on the "goods_sku_desc" field.
func GoodsSkuDescEqualFold(v string) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGoodsSkuDesc), v))
	})
}

// GoodsSkuDescContainsFold applies the ContainsFold predicate on the "goods_sku_desc" field.
func GoodsSkuDescContainsFold(v string) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGoodsSkuDesc), v))
	})
}

// NumEQ applies the EQ predicate on the "num" field.
func NumEQ(v int32) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNum), v))
	})
}

// NumNEQ applies the NEQ predicate on the "num" field.
func NumNEQ(v int32) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNum), v))
	})
}

// NumIn applies the In predicate on the "num" field.
func NumIn(vs ...int32) predicate.Cart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNum), v...))
	})
}

// NumNotIn applies the NotIn predicate on the "num" field.
func NumNotIn(vs ...int32) predicate.Cart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNum), v...))
	})
}

// NumGT applies the GT predicate on the "num" field.
func NumGT(v int32) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNum), v))
	})
}

// NumGTE applies the GTE predicate on the "num" field.
func NumGTE(v int32) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNum), v))
	})
}

// NumLT applies the LT predicate on the "num" field.
func NumLT(v int32) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNum), v))
	})
}

// NumLTE applies the LTE predicate on the "num" field.
func NumLTE(v int32) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNum), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Cart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Cart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Cart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Cart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Cart) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Cart) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Cart) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		p(s.Not())
	})
}
